<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[用github+Hexo搭建个人博客]]></title>
    <url>%2F2019%2F02%2F24%2F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[前言github是一个面向开源及私有软件项目的托管平台，hexo是一个”快速、简洁且高效的博客框架”，这里我们利用github+hexo来搭建一个自己的博客 开始 首先，我们要注册一个github账号，然后创建一个仓库创建后新建一个index.html文件，作为博客的根目录 然后，下载安装node.js，下载安装git，安装完成后还需要做一些git的配置，网上有不少教程，这里就不再赘述了 以上步骤就绪后,打开命令行，cd到你要放置博客文件的目录，输入以下命令12345npm install hexo-cli -g #等待下载安装完毕hexo init yourBlogName #你的路径下会自动生成一个你指定名称的文件夹cd yourBlogNamenpm install #继续完成安装hexo s -p 端口号 #启动hexo服务 这时候打开你的浏览器，输入localhost:端口号你就会发现搭建的博客出来啦！ 别高兴的这么快现在我们只是在本地把博客构建出来而已，还需要进一步配置才能把博客部署到你的github仓库中，下面继续来看一下 使用vscode把整个博客文件夹打开(这里随便大家用哪个编辑器都可以)，打开_confid.yml文件这里的url按这个格式填这里把type改为git，同时加入repo和branch，分别填刚创建的仓库的地址和分支1npm install hexo-deployer-git --save #这里是为了发布到git 最后我们要部署到github上，需要用到deploy命令12hexo g #生成hexo d #部署 在部署前我们可以先在本地预览1hexo s -p 端口号 到这里为止，基本就完成了如果你觉得默认的主题太丑，这里是你一个很好的选择，看到喜欢的主题，去github上下载源码，放到博客的themes文件夹下，修改_config.yml文件的theme选项，重新构建，你就会发现博客的主题变成你想要的那个啦！]]></content>
  </entry>
  <entry>
    <title><![CDATA[iData常用基本数据类型]]></title>
    <url>%2F2019%2F02%2F24%2F%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[DoubleList– iData的浮点数数组 1234import PyiData as pid #以下代码都用pid代替ls=pid.DoubleList()ls.append(12) #添加数据ls.size() #获取数据数量 String– iData的字符串，默认编码为UTF-8 1234567891011str=pid.String() #设置str为PyiData中的String类型str.setValue(&apos;abc&apos;) #设置str的数据，也可以在上一句中直接设置可通过setValueGBK()方法设置GBK编码的数据example:e=pid.iDataInitGet(1,&apos;Y N I&apos;)e,s=pid.iDataGetString(&apos;确认[Y]/取消[N]/忽略[I]/请输入选择: &apos;)if e==pid.iData.eOk or e==pid.iData.eKWord: #eOk指按下回车，eKWord指按下按键 print(s)else: print(&apos;用户放弃选择&apos;) Variant– iData的可变数据类型，可通过setValue来设置不同的类型数据 1234v=pid.Variant()v.setValue()#设置数据后，可通过对应的to方法显示对象v的数据v.toString() v.toDouble() v.toPoint3D()... Point3D Point3DList Point3DListList– 点的三维坐标、坐标点数组(一维)、坐标点数组的集合(二维) 1234567891011121314151617181920212223p=pid.Point3D(100,100,0)p.setXYZ(100,100,0)p.x() p.y() p.z() #分别获取对应的xyz坐标#可以进行加操作：p3=p1+p2#可以进行比较操作：p1==p2p1=pid.Point3DList()for i in range(5): p=pid.Point3D(100,100,0) p1.append(p) #只能传入对象p2=pid.point3DListList()p2.append(p1)Point基本用法example:e,point1=pid.iDataGetPoint(&apos;获取图面上一个点:&apos;) #e为状态，point1为选定点的坐标e,point2=pid.iDataGetPoint2(point1,&apos;获取图面上第二个点:&apos;) #e为状态，point2为选定点的坐标e,point3=pid.iDataGetCorner(point1,&apos;在图面上拉框选择第二个点:&apos;) #e为状态，point3为选定点的坐标if point3.x()&lt;point1.x() print(&apos;右拉框(第一个点在第二点右边)&apos;)else print(&apos;左拉框(第一个点在第二点左边)&apos;) Rect– 矩形 1234567891011121314r=pid.Rect(0,0,100,200) #x起点 y起点 宽 高r.xp() r.yp() r.w() r.h()r.center() #中心点坐标r.bottomRight() #右下角点坐标p=pid.Point3D(50,50,0)print(r.containsPoint(p)) #查看点p是否在矩形r内r2=pid.Rect(0,0,20,50)print(r.contains(p)) #查看矩形r2是否在矩形r内print(r.intersects(r2)) #查看矩形r和r2是否相交r2.setTopLeft(0,0) #设置左上角点r2.setSize(100,100) #设置尺寸 Color– 颜色 12345c=pid.Color(255,255,0,255) #R G B Ac.r c.g c.b c.ac1=pid.backgroundColor() #获取当前背景色pid.setBackgroundColor(c) #设置背景色,只接收对象c0=pid.iData_GetColor(0) #获取索引色]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
